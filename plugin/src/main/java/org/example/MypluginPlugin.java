/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.gradle.api.Project;

import java.io.File;
import java.util.Collections;

import org.example.artifacttranforms.AarToJarTransform;
import org.example.extensions.JavaCompileExtension;
import org.example.tasks.CompileTask;
import org.example.tasks.DebugConfigurationTask;
import org.gradle.api.Plugin;
import org.gradle.api.tasks.Copy;

import org.gradle.api.attributes.Attribute;
import org.gradle.api.attributes.AttributeCompatibilityRule;
import org.gradle.api.attributes.AttributeDisambiguationRule;
import org.gradle.api.attributes.CompatibilityCheckDetails;
import org.gradle.api.attributes.MultipleCandidatesDetails;

/**
 * A simple 'hello world' plugin.
 */

abstract class CustomDisambiguationRule implements AttributeDisambiguationRule<String> {
    @Override
    public void execute(MultipleCandidatesDetails<String> details) {
        System.out.println("===============================");
        System.out.println(details.getConsumerValue());
        System.out.println(details.getCandidateValues().size());
        // if (details.getConsumerValue() != null && details.get() != null) {
        //     if (context.getProducerValue().equals("standard-jvm")) {
        //         context.closestMatch("standard-jvm");
        //     }
        // }
    }
}

class JvmEnvironmentCompatibilityRule implements AttributeCompatibilityRule<String> {
    @Override
    public void execute(CompatibilityCheckDetails<String> details) {
        System.out.println("JvmEnvironmentCompatibilityRule: " + details.getConsumerValue() + " " + details.getProducerValue());
        if(
            details.getConsumerValue().equals("android")
            && 
            details.getProducerValue().equals("standard-jvm")
        ){
            details.compatible();
        }
    }
}
class KotlinPlatformTypeCompatibilityRule implements AttributeCompatibilityRule<String> {
    @Override
    public void execute(CompatibilityCheckDetails<String> details) {
        System.out.println("KotlinPlatformTypeCompatibilityRule: " + details.getConsumerValue() + " " + details.getProducerValue());
        if(
            details.getConsumerValue().equals("androidJvm")
            && 
            details.getProducerValue().equals("jvm")
        ){
            details.compatible();
        }
    }
}

public class MypluginPlugin implements Plugin<Project> {
    public void apply(Project project) {
        System.out.println(">>>>>>> MyPlugin Configuration");

        // project.getDependencies().attributesSchema(attSchema -> {
        //     attSchema.attribute(
        //         Attribute.of("org.gradle.jvm.environment", String.class),
        //         (attMatchingStrategy) -> {
        //             attMatchingStrategy.getDisambiguationRules().add(CustomDisambiguationRule.class);
        //         }
        //     );
        // });

        project.getDependencies().getAttributesSchema().attribute(
            Attribute.of("org.gradle.jvm.environment", String.class)
        )
        .getCompatibilityRules()
        .add(JvmEnvironmentCompatibilityRule.class);
        project.getDependencies().getAttributesSchema().attribute(
            Attribute.of("org.jetbrains.kotlin.platform.type", String.class)
        )
        .getCompatibilityRules()
        .add(KotlinPlatformTypeCompatibilityRule.class);

        var configureContainer = project.getConfigurations();
        var myConfig = configureContainer.dependencyScope("myConfig").get();
        var myReleaseCompile = configureContainer.resolvable("myReleaseCompile").get();
        myReleaseCompile.extendsFrom(myConfig);
        ConfigSetup.RealseCompileAttributes(myReleaseCompile);
        var myReleaseRuntime = configureContainer.resolvable("myReleaseRuntime").get();
        myReleaseRuntime.extendsFrom(myConfig);
        ConfigSetup.RealseCompileAttributes(myReleaseRuntime);
        
        // Register artifact transform
        var dependencyHandler  = project.getDependencies();
        dependencyHandler.registerTransform(
            AarToJarTransform.class,
            transformSpec -> {
                transformSpec.getFrom()
                    .attribute(Attribute.of("artifactType", String.class), "aar");
                transformSpec.getTo()
                    .attribute(Attribute.of("artifactType", String.class), "jar");
            }
        );

        // Create a extensions
        var extensionContainer = project.getExtensions();
        var javaCompileExtension = extensionContainer.create("javacompile", JavaCompileExtension.class);

        // Register a task
        var taskContainer = project.getTasks();
        taskContainer.register("vinh", task -> {
            
        });

        taskContainer.register("greeting", task -> {
            task.doLast(s -> {
                // releaseCompileClasspath releaseRuntimeClasspath
                var releaseCompileClasspath = configureContainer.getByName("myConfig2");
                releaseCompileClasspath.setExtendsFrom(Collections.emptyList());
                releaseCompileClasspath.extendsFrom(myConfig);
                var attributeContainer = releaseCompileClasspath.getAttributes();
                attributeContainer.keySet().forEach(key -> {
                    System.out.println(key + ": " + attributeContainer.getAttribute(key));
                });

                System.out.println();
                // var result = releaseCompileClasspath.getIncoming().getResolutionResult();
                // var rootC = result.getRootComponent().get();
                // var rootV = result.getRootVariant().get();
                // var queue = new ArrayDeque<Tuple2<ResolvedComponentResult, ResolvedVariantResult>>();
                // queue.add(new Tuple2<ResolvedComponentResult, ResolvedVariantResult>(rootC, rootV));
                // while(!queue.isEmpty()){
                //     var entry = queue.removeFirst();
                //     var c = entry.getV1();
                //     var v = entry.getV2();
                //     System.out.println(c.getId());
                //     System.out.println(v.getDisplayName());
                //     c.getDependenciesForVariant(v).forEach(dependency -> {
                //         if (dependency instanceof UnresolvedDependencyResult a) {
                //             a.getFailure();
                //         }
                //         if (!(dependency instanceof ResolvedDependencyResult)) {
                //             throw new RuntimeException("Unknown dependency type: " + dependency);
                //         }
                //         var resolved = (ResolvedDependencyResult)dependency;
                //         if (!dependency.isConstraint()) {
                //             var toVariant = resolved.getResolvedVariant();
                //             queue.add(
                //                 new Tuple2<ResolvedComponentResult, ResolvedVariantResult>(resolved.getSelected(), toVariant));
                //             System.out.println("   " + toVariant.getDisplayName());
                //         }
                //     });
                // }

                System.out.println();
                System.out.println("releaseCompileClasspath.resolve()");
                releaseCompileClasspath.resolve().forEach(f -> {
                    System.out.println(f.getName());
                });
                System.out.println();
            });
        });

        final var TASK_GROUP = "MyTask";
        project.getTasks().register("debugConfig", DebugConfigurationTask.class, (task -> {
            task.setGroup(TASK_GROUP);
        }));

        var destinationCopyRuntimeLib = new File(project.getProjectDir(), "src/main/libs-tmp");
        taskContainer.register("copyRuntimeLib", Copy.class, task -> {
            task.setGroup(TASK_GROUP);
            task.doFirst(t -> {
                project.delete(destinationCopyRuntimeLib);
                System.out.println("Deleted: " + destinationCopyRuntimeLib);
            });
            task.from(
                myReleaseRuntime.getIncoming().artifactView(view -> {
                    view.getAttributes().attribute(Attribute.of("artifactType", String.class), "jar");
                })
                .getFiles()
            );
            task.exclude("android.jar");
            task.setDestinationDir(destinationCopyRuntimeLib);
            task.doLast(t -> {
                System.out.println("Copied to: " + destinationCopyRuntimeLib);
            });
        });

        taskContainer.register("compile", CompileTask.class, task -> {
            task.setGroup(TASK_GROUP);
            task.setSource(new File(project.getProjectDir(), "src/main/java"));
            task.getDestinationDirectory().set(new File(project.getProjectDir(), "build/classes"));
            task.setSourceCompatibility(javaCompileExtension.getVersion().get().toString());
            task.setTargetCompatibility(javaCompileExtension.getVersion().get().toString());
            task.setClasspath(
                myReleaseCompile.getIncoming().artifactView(view -> {
                    view.getAttributes().attribute(Attribute.of("artifactType", String.class), "jar");
                })
                .getFiles()
            );
        });
    }
}
